#!/usr/bin/env perl
use Mojolicious::Lite;

# TODO:
#   Use SRS to pass DMARC (https://www.unlocktheinbox.com/resources/srs/)
#     https://metacpan.org/pod/Mail::SRS
#     https://www.libsrs2.org/srs/srs.pdf
#   Multi-tenancy (minion admin ui, mainly)
#     Handle with queues (but how to grant very auth to various queue)
#   Command: remove alias
#   Command: add domain to sendgrid (requires sendgrid api)
#   Should each domain have its own sendgrid api?
#   Web: add, lookup, remove, add domain
#   Better logging
#   Purge finished jobs
#   Test failed jobs
#   Any way to link jobs / logs here with logs in sendgrid activity?
#   Command: Authenticated SMTP for sending as
#   Setup mailroom and minion to auto start with systemd
#   On Spam: enqueue it and fail it for digesting later
#   Test wildcard recipient

use lib '/var/mojo/apps/mailroom/lib';

use Mojo::JSON 'j';
use Mojo::File qw/tempfile path/;
use Mojo::Util 'md5_sum';
use Mojo::Pg;
use Mojo::SMTP::Client;
use Minion;

use Mail::Address;
use Mail::DMARC::PurePerl;
use Mail::Internet;

push @{app->commands->namespaces}, 'Mailroom::Command';

plugin 'Config';

helper pg     => sub { state $pg = Mojo::Pg->new(app->config('pg')) };
helper smtp   => sub { state $smtp = Mojo::SMTP::Client->new(address => app->config('sendgrid')->{host} || 'smtp.sendgrid.net', autodie => 0) };
helper mx     => sub { my $c = shift; my $domain = $c->req->url->to_abs->host; my $moniker = $c->app->moniker; $domain =~ s/^$moniker\.// and return $domain };
helper lookup => sub {
  my ($c, $domain, $to) = (shift, shift, shift);
  my %rcpt_to = ();
  foreach my $rcpt_to ( map { Mail::Address->new($to->{$_}||'', $_) } @_ ) {
    #$c->app->log->debug(">   %s", join ' ', grep { $_ } $rcpt_to->phrase, '<'.$rcpt_to->address.'>');
    my $aliases = $c->pg->db->select('aliases', ['forward_to'], {-or => [{recipient => $rcpt_to->address}, {recipient => sprintf '*@%s', $rcpt_to->host}]})->arrays->flatten->to_array;
    if ( @$aliases ) {
      #$c->app->log->debug("?   %s", join ', ', map { join ' ', grep { $_ } $rcpt_to->phrase, "<$_>" } @$aliases);
      my $lookup = $c->lookup($domain, $to, @$aliases);
      $rcpt_to{$_} = $lookup->{$_} foreach grep { !$rcpt_to{$_} && !$to->{$_} } keys %$lookup;
    } else {
      next if $rcpt_to->host eq $domain;
      #$c->app->log->debug("<   %s", join ' ', grep { $_ } $rcpt_to->phrase, '<'.$rcpt_to->address.'>');
      $rcpt_to{$rcpt_to->address} = $rcpt_to;
    }
  }
  return \%rcpt_to;
};

app->pg->migrations->from_data->migrate;

plugin Minion => {Pg => app->pg};

app->minion->add_task(forward => sub {
  my ($job, $mail_from, $recipients, $forward_to, $spool) = @_;
  my $time = time;
  # TODO: fail if bad SSL on $domain
  $job->fail("Unable to read $spool") and return unless -f $spool && -r _;
  my $resp = $job->app->smtp->send(
    auth => {type => 'login', login => 'apikey', password => $job->app->config('sendgrid')->{apikey}},
    from => $mail_from,
    to => $forward_to,
    data => path($spool)->slurp,
    quit => 1,
  );
  if ( !ref $resp ) {
    $job->fail(sprintf 'Failed to send: Unexpected return code %s', $resp);
  } elsif ( $resp->error ) {
    #$job->app->log->error(sprintf '[%s(%s)] Failed to send: %s', $domain, $id, $resp->error);
    $job->fail(sprintf 'Failed to send: %s', $resp->error);
  } else {
    #$job->app->log->info(sprintf '[%s(%s)] Sent successfully', $domain, $id);
    $job->finish('Sent successfully');
    #unlink $spool;
  }
  #sleep 60;
  #my $time1 = time;
  #my $api = $job->app->config('sendgrid')->{apikey};
  #my $result = $job->app->ua->get("https://api.sendgrid.com/v3/suppression/blocks?start_time=$time&end_time=$time1" => {Authorization => "Bearer $api"})->result;
  #return unless 
  #my $blocks = Mojo::Collection->new($
});
app->minion->add_task(relay => sub {
  my ($job, $mail_from, $rcpt_to, $spool) = @_;
  # TODO: fail if bad SSL on $domain
  $job->fail("Unable to read $spool") and return unless -f $spool && -r _;
  my $resp = $job->app->smtp->send(
    auth => {type => 'login', login => 'apikey', password => $job->app->config('sendgrid')->{apikey}},
    from => $mail_from,
    to => $rcpt_to,
    data => path($spool)->slurp,
    quit => 1,
  );
  if ( !ref $resp ) {
    $job->fail(sprintf 'Failed to send: Unexpected return code %s', $resp);
  } elsif ( $resp->error ) {
    #$job->app->log->error(sprintf '[%s(%s)] Failed to send: %s', $domain, $id, $resp->error);
    $job->fail(sprintf 'Failed to send: %s', $resp->error);
  } else {
    #$job->app->log->info(sprintf '[%s(%s)] Sent successfully', $domain, $id);
    $job->finish('Sent successfully');
    unlink $spool;
  }
});

post '/' => sub {
  my $c = shift->render_later;

  my $moniker = $c->app->moniker;
  my $domain = $c->req->url->to_abs->host;
  $domain =~ s/^$moniker\.// or return $c->reply->not_found;

  # TO DO: Capture this email and send a digest of retrievable SPAM messages to either the intended recipient or the designated admin account
  # Test SPAM: XJS*C4JDBQADN1.NSBN3*2IDNEN*GTUBE-STANDARD-ANTI-UBE-TEST-EMAIL*C.34X
  return $c->render(text => $c->app->log->info(sprintf '[%s] Failed to send: SPAM', $domain)->history->[-1]->[-1]) if $c->req->params->to_hash->{spam_score} >= $c->config('sendgrid')->{spam_score_threshold};

  # The envelope is who the message is being delivered to, meaning only the addresses 
  my $envelope = j($c->req->params->to_hash->{envelope});
  my $addresses = {
    from => [Mail::Address->parse($c->req->params->to_hash->{from})],
    to   => [Mail::Address->parse($c->req->params->to_hash->{to})],
    cc   => [Mail::Address->parse($c->req->params->to_hash->{cc})],
  };
  my $from = {map { $_->address => $_->phrase } @{$addresses->{from}}};
  my $to   = {map { $_->address => $_->phrase } @{$addresses->{to}}, @{$addresses->{cc}}};

  my $mail_from = [map { Mail::Address->new($from->{$_}||'', $_) } $envelope->{from}]->[0];
  #$c->app->log->debug("MAIL FROM: %s", join ' ', grep { $_ } $mail_from->phrase, '<'.$mail_from->address.'>');

  #$c->app->log->debug("rcpt to: %s", join ', ', map { '<'.$_.'>' } @{$envelope->{to}});
  my $lookup = $c->lookup($domain, $to, @{$envelope->{to}});
  
  my $email_data = $c->req->params->to_hash->{email};

  # Check DMARC, and if it looks like it's going to fail, build a new email message header
  my $dmarc = Mail::DMARC::PurePerl->new(header_from => $mail_from->host);
  if ( $dmarc->validate->disposition ne 'none' ) {
    my $from_name = $addresses->{from}->[0]->phrase;
    my $from_addr = $addresses->{from}->[0]->address;
    $mail_from = Mail::Address->new($from_name, "mailroom-dmarc_rejection\@$domain");
    my $to = $c->req->params->to_hash->{to};
    my $subject = $c->req->params->to_hash->{subject};
    my $mi = Mail::Internet->new;
    $mi->extract([split /\n/, $email_data]);
    chomp(my $ct = $mi->get('Content-Type'));
    chomp(my $mv = $mi->get('MIME-Version'));
    my $new_header = "From: \"$from_name\" <mailroom-dmarc_rejection\@$domain>\nReply-To: \"$from_name\" <$from_addr>\nTo: $to\nSubject: $subject\n";
    $new_header .= "MIME-Version: $mv\n" if $mv;
    $new_header .= "Content-Type: $ct\n" if $ct;
    $email_data = join "\n", $new_header, join("\n", @{$mi->body});
  }

  return $c->render(text => $c->app->log->info(sprintf '[%s] Failed to send: No matches', $domain)->history->[-1]->[-1]) unless keys %$lookup;

  #$c->app->log->debug("RCPT TO: %s", join ', ', map { '<'.$_->address.'>' } values %$lookup);
  my $data = Mojo::Asset::File->new(cleanup => 0, tmpdir => $c->app->home->child('spool', 'forward')->make_path);
  $data->add_chunk($email_data);
  if ( $data->size ) {
    my $id = $c->minion->enqueue(forward => [$mail_from->address, $envelope->{to}, [map { $_->address } values %$lookup], $data->path] => {queue => $domain});
    $c->render(text => $c->app->log->info(sprintf '%s job %s queued successfully', $domain, $id)->history->[-1]->[-1]);
  } else {
    $c->render(text => $c->app->log->error(sprintf '%s job queued unsuccessfully', $domain)->history->[-1]->[-1], status => 501);
  }
};

# Secure access to the admin ui with Basic authentication
my $under = under '/minion' => sub {
  my $c = shift;
  return 1 if $c->req->url->to_abs->userinfo eq $c->config('admin_ui');
  $c->res->headers->www_authenticate('Basic');
  $c->render(text => 'Authentication required!', status => 401);
  return undef;
};
plugin 'Minion::Admin' => {route => $under};

app->start;

__DATA__

@@ migrations
-- 1 up
create table aliases (id serial primary key, recipient varchar(255), forward_to varchar(255));

-- 1 down
drop table if exists aliases;
